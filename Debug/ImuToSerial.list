
ImuToSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002464  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d4  080026d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026dc  080026dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08002754  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002754  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006630  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fb  00000000  00000000  000266c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00027ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000590  00000000  00000000  000280d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d96a  00000000  00000000  00028660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068eb  00000000  00000000  00045fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab3e7  00000000  00000000  0004c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b60  00000000  00000000  000f7cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002630 	.word	0x08002630

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002630 	.word	0x08002630

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fa28 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f838 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8a2 	bl	8000670 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f876 	bl	800061c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIOC->ODR |=LED_GREEN;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x6c>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <main+0x6c>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	60d3      	str	r3, [r2, #12]
	  GPIOC->ODR |=LED_RED;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0x6c>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <main+0x6c>)
 8000542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000546:	60d3      	str	r3, [r2, #12]
	  sprintf(MSG, "Harisree Ganapathaye Nama: \r\n");
 8000548:	4910      	ldr	r1, [pc, #64]	; (800058c <main+0x70>)
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <main+0x74>)
 800054c:	f001 fc36 	bl	8001dbc <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	2223      	movs	r2, #35	; 0x23
 8000554:	490e      	ldr	r1, [pc, #56]	; (8000590 <main+0x74>)
 8000556:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0x78>)
 8000558:	f001 fa93 	bl	8001a82 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 fa6a 	bl	8000a38 <HAL_Delay>
	  GPIOC->ODR &=~LED_GREEN;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <main+0x6c>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x6c>)
 800056a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800056e:	60d3      	str	r3, [r2, #12]
	  GPIOC->ODR &=~LED_RED;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x6c>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <main+0x6c>)
 8000576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800057a:	60d3      	str	r3, [r2, #12]
	  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fa5a 	bl	8000a38 <HAL_Delay>
	  GPIOC->ODR |=LED_GREEN;
 8000584:	e7d4      	b.n	8000530 <main+0x14>
 8000586:	bf00      	nop
 8000588:	40011000 	.word	0x40011000
 800058c:	08002648 	.word	0x08002648
 8000590:	2000008c 	.word	0x2000008c
 8000594:	200000bc 	.word	0x200000bc

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fc00 	bl	8001dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fcd4 	bl	8000f80 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80005de:	f000 f8ad 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ffd6 	bl	80015ac <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000606:	f000 f899 	bl	800073c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <SystemClock_Config+0x80>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	42420070 	.word	0x42420070

0800061c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART1_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800062c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000654:	f001 f9c8 	bl	80019e8 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f86d 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000bc 	.word	0x200000bc
 800066c:	40013800 	.word	0x40013800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <MX_GPIO_Init+0xc0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <MX_GPIO_Init+0xc0>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_GPIO_Init+0xc0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_GPIO_Init+0xc0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a23      	ldr	r2, [pc, #140]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_GPIO_Init+0xc0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0xc4>)
 80006d4:	f000 fc3c 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006de:	2312      	movs	r3, #18
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0xc8>)
 80006ee:	f000 faab 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <MX_GPIO_Init+0xc4>)
 800070c:	f000 fa9c 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000710:	2330      	movs	r3, #48	; 0x30
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_GPIO_Init+0xc8>)
 8000724:	f000 fa90 	bl	8000c48 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	40011000 	.word	0x40011000
 8000738:	40010c00 	.word	0x40010c00

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <HAL_UART_MspInit+0xa4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d13d      	bne.n	8000848 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xa8>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <HAL_UART_MspInit+0xac>)
 8000810:	f000 fa1a 	bl	8000c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_UART_MspInit+0xac>)
 8000828:	f000 fa0e 	bl	8000c48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_UART_MspInit+0xb0>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_UART_MspInit+0xb0>)
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40013800 	.word	0x40013800
 8000854:	40021000 	.word	0x40021000
 8000858:	40010c00 	.word	0x40010c00
 800085c:	40010000 	.word	0x40010000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 f8ab 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d207      	bcs.n	80008f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e0:	f001 fa3a 	bl	8001d58 <__errno>
 80008e4:	4603      	mov	r3, r0
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	e009      	b.n	8000904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <_sbrk+0x64>)
 8000900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20010000 	.word	0x20010000
 8000910:	00000400 	.word	0x00000400
 8000914:	200000b0 	.word	0x200000b0
 8000918:	20000118 	.word	0x20000118

0800091c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094e:	f7ff ffe5 	bl	800091c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000952:	f001 fa07 	bl	8001d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fde1 	bl	800051c <main>
  bx lr
 800095a:	4770      	bx	lr
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000964:	080026e4 	.word	0x080026e4
  ldr r2, =_sbss
 8000968:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800096c:	20000114 	.word	0x20000114

08000970 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_Init+0x28>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x28>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f92b 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff feda 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f935 	bl	8000c2e <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f90b 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_IncTick+0x20>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000100 	.word	0x20000100

08000a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_GetTick+0x10>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000100 	.word	0x20000100

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fff0 	bl	8000a24 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffe0 	bl	8000a24 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff90 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff49 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff90 	bl	8000b38 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5f 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb0 	bl	8000b9c <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b08b      	sub	sp, #44	; 0x2c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e169      	b.n	8000f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	f040 8158 	bne.w	8000f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	4a9a      	ldr	r2, [pc, #616]	; (8000ee8 <HAL_GPIO_Init+0x2a0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d05e      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c84:	4a98      	ldr	r2, [pc, #608]	; (8000ee8 <HAL_GPIO_Init+0x2a0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d875      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000c8a:	4a98      	ldr	r2, [pc, #608]	; (8000eec <HAL_GPIO_Init+0x2a4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d058      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c90:	4a96      	ldr	r2, [pc, #600]	; (8000eec <HAL_GPIO_Init+0x2a4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d86f      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000c96:	4a96      	ldr	r2, [pc, #600]	; (8000ef0 <HAL_GPIO_Init+0x2a8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d052      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000c9c:	4a94      	ldr	r2, [pc, #592]	; (8000ef0 <HAL_GPIO_Init+0x2a8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d869      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000ca2:	4a94      	ldr	r2, [pc, #592]	; (8000ef4 <HAL_GPIO_Init+0x2ac>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d04c      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000ca8:	4a92      	ldr	r2, [pc, #584]	; (8000ef4 <HAL_GPIO_Init+0x2ac>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d863      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cae:	4a92      	ldr	r2, [pc, #584]	; (8000ef8 <HAL_GPIO_Init+0x2b0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d046      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
 8000cb4:	4a90      	ldr	r2, [pc, #576]	; (8000ef8 <HAL_GPIO_Init+0x2b0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d85d      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d82a      	bhi.n	8000d14 <HAL_GPIO_Init+0xcc>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d859      	bhi.n	8000d76 <HAL_GPIO_Init+0x12e>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <HAL_GPIO_Init+0x80>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000d43 	.word	0x08000d43
 8000ccc:	08000d1d 	.word	0x08000d1d
 8000cd0:	08000d2f 	.word	0x08000d2f
 8000cd4:	08000d71 	.word	0x08000d71
 8000cd8:	08000d77 	.word	0x08000d77
 8000cdc:	08000d77 	.word	0x08000d77
 8000ce0:	08000d77 	.word	0x08000d77
 8000ce4:	08000d77 	.word	0x08000d77
 8000ce8:	08000d77 	.word	0x08000d77
 8000cec:	08000d77 	.word	0x08000d77
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000d77 	.word	0x08000d77
 8000cf8:	08000d77 	.word	0x08000d77
 8000cfc:	08000d77 	.word	0x08000d77
 8000d00:	08000d77 	.word	0x08000d77
 8000d04:	08000d77 	.word	0x08000d77
 8000d08:	08000d77 	.word	0x08000d77
 8000d0c:	08000d25 	.word	0x08000d25
 8000d10:	08000d39 	.word	0x08000d39
 8000d14:	4a79      	ldr	r2, [pc, #484]	; (8000efc <HAL_GPIO_Init+0x2b4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1a:	e02c      	b.n	8000d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	623b      	str	r3, [r7, #32]
          break;
 8000d22:	e029      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	e024      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	3308      	adds	r3, #8
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e01f      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	330c      	adds	r3, #12
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e01a      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e013      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d105      	bne.n	8000d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	611a      	str	r2, [r3, #16]
          break;
 8000d62:	e009      	b.n	8000d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d64:	2308      	movs	r3, #8
 8000d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	615a      	str	r2, [r3, #20]
          break;
 8000d6e:	e003      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x130>
          break;
 8000d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2bff      	cmp	r3, #255	; 0xff
 8000d7c:	d801      	bhi.n	8000d82 <HAL_GPIO_Init+0x13a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	e001      	b.n	8000d86 <HAL_GPIO_Init+0x13e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3304      	adds	r3, #4
 8000d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2bff      	cmp	r3, #255	; 0xff
 8000d8c:	d802      	bhi.n	8000d94 <HAL_GPIO_Init+0x14c>
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x152>
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	3b08      	subs	r3, #8
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	210f      	movs	r1, #15
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	6a39      	ldr	r1, [r7, #32]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc8:	4b4d      	ldr	r3, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de0:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <HAL_GPIO_Init+0x2bc>)
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <HAL_GPIO_Init+0x2c0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d013      	beq.n	8000e34 <HAL_GPIO_Init+0x1ec>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d00d      	beq.n	8000e30 <HAL_GPIO_Init+0x1e8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <HAL_GPIO_Init+0x2c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x1e4>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3d      	ldr	r2, [pc, #244]	; (8000f14 <HAL_GPIO_Init+0x2cc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_GPIO_Init+0x1e0>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e006      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	e004      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x1ee>
 8000e34:	2300      	movs	r3, #0
 8000e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e38:	f002 0203 	and.w	r2, r2, #3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e46:	492f      	ldr	r1, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x2bc>)
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	492c      	ldr	r1, [pc, #176]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4928      	ldr	r1, [pc, #160]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4922      	ldr	r1, [pc, #136]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	491e      	ldr	r1, [pc, #120]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	4918      	ldr	r1, [pc, #96]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4914      	ldr	r1, [pc, #80]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d021      	beq.n	8000f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	490e      	ldr	r1, [pc, #56]	; (8000f18 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60cb      	str	r3, [r1, #12]
 8000ee4:	e021      	b.n	8000f2a <HAL_GPIO_Init+0x2e2>
 8000ee6:	bf00      	nop
 8000ee8:	10320000 	.word	0x10320000
 8000eec:	10310000 	.word	0x10310000
 8000ef0:	10220000 	.word	0x10220000
 8000ef4:	10210000 	.word	0x10210000
 8000ef8:	10120000 	.word	0x10120000
 8000efc:	10110000 	.word	0x10110000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40011400 	.word	0x40011400
 8000f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4909      	ldr	r1, [pc, #36]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f47f ae8e 	bne.w	8000c5c <HAL_GPIO_Init+0x14>
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	372c      	adds	r7, #44	; 0x2c
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f6c:	e003      	b.n	8000f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	611a      	str	r2, [r3, #16]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e304      	b.n	800159c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8087 	beq.w	80010ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa0:	4b92      	ldr	r3, [pc, #584]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d00c      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fac:	4b8f      	ldr	r3, [pc, #572]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d112      	bne.n	8000fde <HAL_RCC_OscConfig+0x5e>
 8000fb8:	4b8c      	ldr	r3, [pc, #560]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc4:	d10b      	bne.n	8000fde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc6:	4b89      	ldr	r3, [pc, #548]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d06c      	beq.n	80010ac <HAL_RCC_OscConfig+0x12c>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d168      	bne.n	80010ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e2de      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x76>
 8000fe8:	4b80      	ldr	r3, [pc, #512]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a7f      	ldr	r2, [pc, #508]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8000fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e02e      	b.n	8001054 <HAL_RCC_OscConfig+0xd4>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x98>
 8000ffe:	4b7b      	ldr	r3, [pc, #492]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a7a      	ldr	r2, [pc, #488]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b78      	ldr	r3, [pc, #480]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a77      	ldr	r2, [pc, #476]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e01d      	b.n	8001054 <HAL_RCC_OscConfig+0xd4>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0xbc>
 8001022:	4b72      	ldr	r3, [pc, #456]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a71      	ldr	r2, [pc, #452]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6e      	ldr	r2, [pc, #440]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0xd4>
 800103c:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a6a      	ldr	r2, [pc, #424]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b68      	ldr	r3, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a67      	ldr	r2, [pc, #412]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d013      	beq.n	8001084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fce2 	bl	8000a24 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fcde 	bl	8000a24 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e292      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f0      	beq.n	8001064 <HAL_RCC_OscConfig+0xe4>
 8001082:	e014      	b.n	80010ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fcce 	bl	8000a24 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fcca 	bl	8000a24 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e27e      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x10c>
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d063      	beq.n	8001182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ba:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b08      	cmp	r3, #8
 80010d0:	d11c      	bne.n	800110c <HAL_RCC_OscConfig+0x18c>
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d116      	bne.n	800110c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_RCC_OscConfig+0x176>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d001      	beq.n	80010f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e252      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4939      	ldr	r1, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	e03a      	b.n	8001182 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_RCC_OscConfig+0x270>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fc83 	bl	8000a24 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fc7f 	bl	8000a24 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e233      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4927      	ldr	r1, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
 8001154:	e015      	b.n	8001182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_RCC_OscConfig+0x270>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc62 	bl	8000a24 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fc5e 	bl	8000a24 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e212      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03a      	beq.n	8001204 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d019      	beq.n	80011ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_RCC_OscConfig+0x274>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119c:	f7ff fc42 	bl	8000a24 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc3e 	bl	8000a24 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1f2      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_RCC_OscConfig+0x26c>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 fbf2 	bl	80019ac <RCC_Delay>
 80011c8:	e01c      	b.n	8001204 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_RCC_OscConfig+0x274>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc28 	bl	8000a24 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d6:	e00f      	b.n	80011f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc24 	bl	8000a24 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d908      	bls.n	80011f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1d8      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	42420000 	.word	0x42420000
 80011f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b9b      	ldr	r3, [pc, #620]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e9      	bne.n	80011d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a6 	beq.w	800135e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b94      	ldr	r3, [pc, #592]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10d      	bne.n	800123e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b91      	ldr	r3, [pc, #580]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a90      	ldr	r2, [pc, #576]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b8e      	ldr	r3, [pc, #568]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123a:	2301      	movs	r3, #1
 800123c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	4b8b      	ldr	r3, [pc, #556]	; (800146c <HAL_RCC_OscConfig+0x4ec>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x4ec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a87      	ldr	r2, [pc, #540]	; (800146c <HAL_RCC_OscConfig+0x4ec>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001256:	f7ff fbe5 	bl	8000a24 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125e:	f7ff fbe1 	bl	8000a24 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	; 0x64
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e195      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	4b7e      	ldr	r3, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x4ec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x312>
 8001284:	4b78      	ldr	r3, [pc, #480]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	e02d      	b.n	80012ee <HAL_RCC_OscConfig+0x36e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x334>
 800129a:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	6213      	str	r3, [r2, #32]
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	e01c      	b.n	80012ee <HAL_RCC_OscConfig+0x36e>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d10c      	bne.n	80012d6 <HAL_RCC_OscConfig+0x356>
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6213      	str	r3, [r2, #32]
 80012d4:	e00b      	b.n	80012ee <HAL_RCC_OscConfig+0x36e>
 80012d6:	4b64      	ldr	r3, [pc, #400]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	6213      	str	r3, [r2, #32]
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a60      	ldr	r2, [pc, #384]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	f023 0304 	bic.w	r3, r3, #4
 80012ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb95 	bl	8000a24 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff fb91 	bl	8000a24 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f241 3288 	movw	r2, #5000	; 0x1388
 800130c:	4293      	cmp	r3, r2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e143      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001314:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0ee      	beq.n	80012fe <HAL_RCC_OscConfig+0x37e>
 8001320:	e014      	b.n	800134c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fb7f 	bl	8000a24 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff fb7b 	bl	8000a24 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e12d      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001340:	4b49      	ldr	r3, [pc, #292]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ee      	bne.n	800132a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d105      	bne.n	800135e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a44      	ldr	r2, [pc, #272]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 808c 	beq.w	8001480 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d10e      	bne.n	8001394 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800137e:	2b08      	cmp	r3, #8
 8001380:	d108      	bne.n	8001394 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e103      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	2b02      	cmp	r3, #2
 800139a:	d14e      	bne.n	800143a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0ef      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0x4f0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb2f 	bl	8000a24 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80013ca:	f7ff fb2b 	bl	8000a24 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0df      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	491c      	ldr	r1, [pc, #112]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4918      	ldr	r1, [pc, #96]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	4313      	orrs	r3, r2
 800140a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_RCC_OscConfig+0x4f0>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb07 	bl	8000a24 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800141a:	f7ff fb03 	bl	8000a24 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	; 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0b7      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x49a>
 8001438:	e022      	b.n	8001480 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x4f0>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff faea 	bl	8000a24 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001452:	e00f      	b.n	8001474 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001454:	f7ff fae6 	bl	8000a24 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d908      	bls.n	8001474 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e09a      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e9      	bne.n	8001454 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8088 	beq.w	800159a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d068      	beq.n	8001568 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d14d      	bne.n	800153a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fabe 	bl	8000a24 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff faba 	bl	8000a24 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e06e      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d10f      	bne.n	80014f4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4931      	ldr	r1, [pc, #196]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f023 020f 	bic.w	r2, r3, #15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	492d      	ldr	r1, [pc, #180]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	430b      	orrs	r3, r1
 8001506:	4927      	ldr	r1, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa87 	bl	8000a24 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fa83 	bl	8000a24 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e037      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x59a>
 8001538:	e02f      	b.n	800159a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fa70 	bl	8000a24 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fa6c 	bl	8000a24 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e020      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c8>
 8001566:	e018      	b.n	800159a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e013      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x624>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	429a      	cmp	r2, r3
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	42420060 	.word	0x42420060

080015ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d0      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4965      	ldr	r1, [pc, #404]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d115      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e073      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06b      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4936      	ldr	r1, [pc, #216]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff f9c2 	bl	8000a24 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff f9be 	bl	8000a24 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e053      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d210      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1cc>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f920 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000
 8001770:	40021000 	.word	0x40021000
 8001774:	08002688 	.word	0x08002688
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	b091      	sub	sp, #68	; 0x44
 8001786:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800178a:	f107 0414 	add.w	r4, r7, #20
 800178e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001790:	c407      	stmia	r4!, {r0, r1, r2}
 8001792:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001796:	1d3c      	adds	r4, r7, #4
 8001798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
 80017a6:	2300      	movs	r3, #0
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x50>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x56>
 80017ce:	e0a8      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d0:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017d4:	e0a8      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80017e2:	4413      	add	r3, r2
 80017e4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 808e 	beq.w	8001912 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001802:	4413      	add	r3, r2
 8001804:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06b      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	3301      	adds	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3302      	adds	r3, #2
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	4618      	mov	r0, r3
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	461a      	mov	r2, r3
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	fb02 f501 	mul.w	r5, r2, r1
 8001846:	fb00 f403 	mul.w	r4, r0, r3
 800184a:	192e      	adds	r6, r5, r4
 800184c:	fba0 4502 	umull	r4, r5, r0, r2
 8001850:	1973      	adds	r3, r6, r5
 8001852:	461d      	mov	r5, r3
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	014b      	lsls	r3, r1, #5
 8001862:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001866:	0142      	lsls	r2, r0, #5
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	1b00      	subs	r0, r0, r4
 800186e:	eb61 0105 	sbc.w	r1, r1, r5
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001880:	0182      	lsls	r2, r0, #6
 8001882:	1a12      	subs	r2, r2, r0
 8001884:	eb63 0301 	sbc.w	r3, r3, r1
 8001888:	f04f 0000 	mov.w	r0, #0
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	00d9      	lsls	r1, r3, #3
 8001892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001896:	00d0      	lsls	r0, r2, #3
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	1912      	adds	r2, r2, r4
 800189e:	eb45 0303 	adc.w	r3, r5, r3
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0259      	lsls	r1, r3, #9
 80018ac:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018b0:	0250      	lsls	r0, r2, #9
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4690      	mov	r8, r2
 80018b8:	4699      	mov	r9, r3
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018bc:	4618      	mov	r0, r3
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	fb02 f501 	mul.w	r5, r2, r1
 80018ce:	fb00 f403 	mul.w	r4, r0, r3
 80018d2:	442c      	add	r4, r5
 80018d4:	fba0 2302 	umull	r2, r3, r0, r2
 80018d8:	18e1      	adds	r1, r4, r3
 80018da:	460b      	mov	r3, r1
 80018dc:	4640      	mov	r0, r8
 80018de:	4649      	mov	r1, r9
 80018e0:	f7fe fca0 	bl	8000224 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	e007      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018f2:	fb02 f203 	mul.w	r2, r2, r3
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80018fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001902:	461a      	mov	r2, r3
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	4293      	cmp	r3, r2
 8001908:	d108      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	e004      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001920:	e002      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800192a:	4618      	mov	r0, r3
 800192c:	3744      	adds	r7, #68	; 0x44
 800192e:	46bd      	mov	sp, r7
 8001930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001934:	08002668 	.word	0x08002668
 8001938:	08002678 	.word	0x08002678
 800193c:	40021000 	.word	0x40021000
 8001940:	007a1200 	.word	0x007a1200
 8001944:	003d0900 	.word	0x003d0900

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_RCC_GetHCLKFreq+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff2 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	08002698 	.word	0x08002698

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001988:	f7ff ffde 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	0adb      	lsrs	r3, r3, #11
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08002698 	.word	0x08002698

080019ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <RCC_Delay+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <RCC_Delay+0x38>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0a5b      	lsrs	r3, r3, #9
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c8:	bf00      	nop
  }
  while (Delay --);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	60fa      	str	r2, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <RCC_Delay+0x1c>
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000000 	.word	0x20000000
 80019e4:	10624dd3 	.word	0x10624dd3

080019e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e03f      	b.n	8001a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fecc 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f905 	bl	8001c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b08a      	sub	sp, #40	; 0x28
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d17c      	bne.n	8001b9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_UART_Transmit+0x2c>
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e075      	b.n	8001b9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_UART_Transmit+0x3e>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e06e      	b.n	8001b9e <HAL_UART_Transmit+0x11c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	; 0x21
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ad6:	f7fe ffa5 	bl	8000a24 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af0:	d108      	bne.n	8001b04 <HAL_UART_Transmit+0x82>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e003      	b.n	8001b0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b14:	e02a      	b.n	8001b6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f840 	bl	8001ba6 <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e036      	b.n	8001b9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10b      	bne.n	8001b4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e007      	b.n	8001b5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1cf      	bne.n	8001b16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f810 	bl	8001ba6 <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e006      	b.n	8001b9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb6:	e02c      	b.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d028      	beq.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bc6:	f7fe ff2d 	bl	8000a24 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d21d      	bcs.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001be4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e00f      	b.n	8001c32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d0c3      	beq.n	8001bb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c76:	f023 030c 	bic.w	r3, r3, #12
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <UART_SetConfig+0x114>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d103      	bne.n	8001cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ca4:	f7ff fe6e 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	e002      	b.n	8001cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cac:	f7ff fe56 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <UART_SetConfig+0x118>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	0119      	lsls	r1, r3, #4
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	009a      	lsls	r2, r3, #2
 8001cdc:	441a      	add	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <UART_SetConfig+0x118>)
 8001cea:	fba3 0302 	umull	r0, r3, r3, r2
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	fb00 f303 	mul.w	r3, r0, r3
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	3332      	adds	r3, #50	; 0x32
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <UART_SetConfig+0x118>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d08:	4419      	add	r1, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <UART_SetConfig+0x118>)
 8001d22:	fba3 0302 	umull	r0, r3, r3, r2
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2064      	movs	r0, #100	; 0x64
 8001d2a:	fb00 f303 	mul.w	r3, r0, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	3332      	adds	r3, #50	; 0x32
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <UART_SetConfig+0x118>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	440a      	add	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40013800 	.word	0x40013800
 8001d54:	51eb851f 	.word	0x51eb851f

08001d58 <__errno>:
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <__errno+0x8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000000c 	.word	0x2000000c

08001d64 <__libc_init_array>:
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	2600      	movs	r6, #0
 8001d68:	4d0c      	ldr	r5, [pc, #48]	; (8001d9c <__libc_init_array+0x38>)
 8001d6a:	4c0d      	ldr	r4, [pc, #52]	; (8001da0 <__libc_init_array+0x3c>)
 8001d6c:	1b64      	subs	r4, r4, r5
 8001d6e:	10a4      	asrs	r4, r4, #2
 8001d70:	42a6      	cmp	r6, r4
 8001d72:	d109      	bne.n	8001d88 <__libc_init_array+0x24>
 8001d74:	f000 fc5c 	bl	8002630 <_init>
 8001d78:	2600      	movs	r6, #0
 8001d7a:	4d0a      	ldr	r5, [pc, #40]	; (8001da4 <__libc_init_array+0x40>)
 8001d7c:	4c0a      	ldr	r4, [pc, #40]	; (8001da8 <__libc_init_array+0x44>)
 8001d7e:	1b64      	subs	r4, r4, r5
 8001d80:	10a4      	asrs	r4, r4, #2
 8001d82:	42a6      	cmp	r6, r4
 8001d84:	d105      	bne.n	8001d92 <__libc_init_array+0x2e>
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d8c:	4798      	blx	r3
 8001d8e:	3601      	adds	r6, #1
 8001d90:	e7ee      	b.n	8001d70 <__libc_init_array+0xc>
 8001d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d96:	4798      	blx	r3
 8001d98:	3601      	adds	r6, #1
 8001d9a:	e7f2      	b.n	8001d82 <__libc_init_array+0x1e>
 8001d9c:	080026dc 	.word	0x080026dc
 8001da0:	080026dc 	.word	0x080026dc
 8001da4:	080026dc 	.word	0x080026dc
 8001da8:	080026e0 	.word	0x080026e0

08001dac <memset>:
 8001dac:	4603      	mov	r3, r0
 8001dae:	4402      	add	r2, r0
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d100      	bne.n	8001db6 <memset+0xa>
 8001db4:	4770      	bx	lr
 8001db6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dba:	e7f9      	b.n	8001db0 <memset+0x4>

08001dbc <siprintf>:
 8001dbc:	b40e      	push	{r1, r2, r3}
 8001dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001dc2:	b500      	push	{lr}
 8001dc4:	b09c      	sub	sp, #112	; 0x70
 8001dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8001dc8:	9002      	str	r0, [sp, #8]
 8001dca:	9006      	str	r0, [sp, #24]
 8001dcc:	9107      	str	r1, [sp, #28]
 8001dce:	9104      	str	r1, [sp, #16]
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <siprintf+0x38>)
 8001dd2:	4909      	ldr	r1, [pc, #36]	; (8001df8 <siprintf+0x3c>)
 8001dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dd8:	9105      	str	r1, [sp, #20]
 8001dda:	6800      	ldr	r0, [r0, #0]
 8001ddc:	a902      	add	r1, sp, #8
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f000 f868 	bl	8001eb4 <_svfiprintf_r>
 8001de4:	2200      	movs	r2, #0
 8001de6:	9b02      	ldr	r3, [sp, #8]
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	b01c      	add	sp, #112	; 0x70
 8001dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001df0:	b003      	add	sp, #12
 8001df2:	4770      	bx	lr
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	ffff0208 	.word	0xffff0208

08001dfc <__ssputs_r>:
 8001dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e00:	688e      	ldr	r6, [r1, #8]
 8001e02:	4682      	mov	sl, r0
 8001e04:	429e      	cmp	r6, r3
 8001e06:	460c      	mov	r4, r1
 8001e08:	4690      	mov	r8, r2
 8001e0a:	461f      	mov	r7, r3
 8001e0c:	d838      	bhi.n	8001e80 <__ssputs_r+0x84>
 8001e0e:	898a      	ldrh	r2, [r1, #12]
 8001e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e14:	d032      	beq.n	8001e7c <__ssputs_r+0x80>
 8001e16:	6825      	ldr	r5, [r4, #0]
 8001e18:	6909      	ldr	r1, [r1, #16]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	eba5 0901 	sub.w	r9, r5, r1
 8001e20:	6965      	ldr	r5, [r4, #20]
 8001e22:	444b      	add	r3, r9
 8001e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e2c:	106d      	asrs	r5, r5, #1
 8001e2e:	429d      	cmp	r5, r3
 8001e30:	bf38      	it	cc
 8001e32:	461d      	movcc	r5, r3
 8001e34:	0553      	lsls	r3, r2, #21
 8001e36:	d531      	bpl.n	8001e9c <__ssputs_r+0xa0>
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f000 fb53 	bl	80024e4 <_malloc_r>
 8001e3e:	4606      	mov	r6, r0
 8001e40:	b950      	cbnz	r0, 8001e58 <__ssputs_r+0x5c>
 8001e42:	230c      	movs	r3, #12
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f8ca 3000 	str.w	r3, [sl]
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e52:	81a3      	strh	r3, [r4, #12]
 8001e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e58:	464a      	mov	r2, r9
 8001e5a:	6921      	ldr	r1, [r4, #16]
 8001e5c:	f000 face 	bl	80023fc <memcpy>
 8001e60:	89a3      	ldrh	r3, [r4, #12]
 8001e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	81a3      	strh	r3, [r4, #12]
 8001e6c:	6126      	str	r6, [r4, #16]
 8001e6e:	444e      	add	r6, r9
 8001e70:	6026      	str	r6, [r4, #0]
 8001e72:	463e      	mov	r6, r7
 8001e74:	6165      	str	r5, [r4, #20]
 8001e76:	eba5 0509 	sub.w	r5, r5, r9
 8001e7a:	60a5      	str	r5, [r4, #8]
 8001e7c:	42be      	cmp	r6, r7
 8001e7e:	d900      	bls.n	8001e82 <__ssputs_r+0x86>
 8001e80:	463e      	mov	r6, r7
 8001e82:	4632      	mov	r2, r6
 8001e84:	4641      	mov	r1, r8
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	f000 fac6 	bl	8002418 <memmove>
 8001e8c:	68a3      	ldr	r3, [r4, #8]
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	1b9b      	subs	r3, r3, r6
 8001e92:	4432      	add	r2, r6
 8001e94:	2000      	movs	r0, #0
 8001e96:	60a3      	str	r3, [r4, #8]
 8001e98:	6022      	str	r2, [r4, #0]
 8001e9a:	e7db      	b.n	8001e54 <__ssputs_r+0x58>
 8001e9c:	462a      	mov	r2, r5
 8001e9e:	f000 fb7b 	bl	8002598 <_realloc_r>
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d1e1      	bne.n	8001e6c <__ssputs_r+0x70>
 8001ea8:	4650      	mov	r0, sl
 8001eaa:	6921      	ldr	r1, [r4, #16]
 8001eac:	f000 face 	bl	800244c <_free_r>
 8001eb0:	e7c7      	b.n	8001e42 <__ssputs_r+0x46>
	...

08001eb4 <_svfiprintf_r>:
 8001eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb8:	4698      	mov	r8, r3
 8001eba:	898b      	ldrh	r3, [r1, #12]
 8001ebc:	4607      	mov	r7, r0
 8001ebe:	061b      	lsls	r3, r3, #24
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	b09d      	sub	sp, #116	; 0x74
 8001ec6:	d50e      	bpl.n	8001ee6 <_svfiprintf_r+0x32>
 8001ec8:	690b      	ldr	r3, [r1, #16]
 8001eca:	b963      	cbnz	r3, 8001ee6 <_svfiprintf_r+0x32>
 8001ecc:	2140      	movs	r1, #64	; 0x40
 8001ece:	f000 fb09 	bl	80024e4 <_malloc_r>
 8001ed2:	6028      	str	r0, [r5, #0]
 8001ed4:	6128      	str	r0, [r5, #16]
 8001ed6:	b920      	cbnz	r0, 8001ee2 <_svfiprintf_r+0x2e>
 8001ed8:	230c      	movs	r3, #12
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	e0d1      	b.n	8002086 <_svfiprintf_r+0x1d2>
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	616b      	str	r3, [r5, #20]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eea:	2320      	movs	r3, #32
 8001eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ef0:	2330      	movs	r3, #48	; 0x30
 8001ef2:	f04f 0901 	mov.w	r9, #1
 8001ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001efa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80020a0 <_svfiprintf_r+0x1ec>
 8001efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f02:	4623      	mov	r3, r4
 8001f04:	469a      	mov	sl, r3
 8001f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f0a:	b10a      	cbz	r2, 8001f10 <_svfiprintf_r+0x5c>
 8001f0c:	2a25      	cmp	r2, #37	; 0x25
 8001f0e:	d1f9      	bne.n	8001f04 <_svfiprintf_r+0x50>
 8001f10:	ebba 0b04 	subs.w	fp, sl, r4
 8001f14:	d00b      	beq.n	8001f2e <_svfiprintf_r+0x7a>
 8001f16:	465b      	mov	r3, fp
 8001f18:	4622      	mov	r2, r4
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	f7ff ff6d 	bl	8001dfc <__ssputs_r>
 8001f22:	3001      	adds	r0, #1
 8001f24:	f000 80aa 	beq.w	800207c <_svfiprintf_r+0x1c8>
 8001f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f2a:	445a      	add	r2, fp
 8001f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80a2 	beq.w	800207c <_svfiprintf_r+0x1c8>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f42:	f10a 0a01 	add.w	sl, sl, #1
 8001f46:	9304      	str	r3, [sp, #16]
 8001f48:	9307      	str	r3, [sp, #28]
 8001f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8001f50:	4654      	mov	r4, sl
 8001f52:	2205      	movs	r2, #5
 8001f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f58:	4851      	ldr	r0, [pc, #324]	; (80020a0 <_svfiprintf_r+0x1ec>)
 8001f5a:	f000 fa41 	bl	80023e0 <memchr>
 8001f5e:	9a04      	ldr	r2, [sp, #16]
 8001f60:	b9d8      	cbnz	r0, 8001f9a <_svfiprintf_r+0xe6>
 8001f62:	06d0      	lsls	r0, r2, #27
 8001f64:	bf44      	itt	mi
 8001f66:	2320      	movmi	r3, #32
 8001f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f6c:	0711      	lsls	r1, r2, #28
 8001f6e:	bf44      	itt	mi
 8001f70:	232b      	movmi	r3, #43	; 0x2b
 8001f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f76:	f89a 3000 	ldrb.w	r3, [sl]
 8001f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f7c:	d015      	beq.n	8001faa <_svfiprintf_r+0xf6>
 8001f7e:	4654      	mov	r4, sl
 8001f80:	2000      	movs	r0, #0
 8001f82:	f04f 0c0a 	mov.w	ip, #10
 8001f86:	9a07      	ldr	r2, [sp, #28]
 8001f88:	4621      	mov	r1, r4
 8001f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f8e:	3b30      	subs	r3, #48	; 0x30
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d94e      	bls.n	8002032 <_svfiprintf_r+0x17e>
 8001f94:	b1b0      	cbz	r0, 8001fc4 <_svfiprintf_r+0x110>
 8001f96:	9207      	str	r2, [sp, #28]
 8001f98:	e014      	b.n	8001fc4 <_svfiprintf_r+0x110>
 8001f9a:	eba0 0308 	sub.w	r3, r0, r8
 8001f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	46a2      	mov	sl, r4
 8001fa6:	9304      	str	r3, [sp, #16]
 8001fa8:	e7d2      	b.n	8001f50 <_svfiprintf_r+0x9c>
 8001faa:	9b03      	ldr	r3, [sp, #12]
 8001fac:	1d19      	adds	r1, r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	9103      	str	r1, [sp, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bfbb      	ittet	lt
 8001fb6:	425b      	neglt	r3, r3
 8001fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8001fbc:	9307      	strge	r3, [sp, #28]
 8001fbe:	9307      	strlt	r3, [sp, #28]
 8001fc0:	bfb8      	it	lt
 8001fc2:	9204      	strlt	r2, [sp, #16]
 8001fc4:	7823      	ldrb	r3, [r4, #0]
 8001fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc8:	d10c      	bne.n	8001fe4 <_svfiprintf_r+0x130>
 8001fca:	7863      	ldrb	r3, [r4, #1]
 8001fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fce:	d135      	bne.n	800203c <_svfiprintf_r+0x188>
 8001fd0:	9b03      	ldr	r3, [sp, #12]
 8001fd2:	3402      	adds	r4, #2
 8001fd4:	1d1a      	adds	r2, r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	9203      	str	r2, [sp, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bfb8      	it	lt
 8001fde:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fe2:	9305      	str	r3, [sp, #20]
 8001fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020b0 <_svfiprintf_r+0x1fc>
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4650      	mov	r0, sl
 8001fec:	7821      	ldrb	r1, [r4, #0]
 8001fee:	f000 f9f7 	bl	80023e0 <memchr>
 8001ff2:	b140      	cbz	r0, 8002006 <_svfiprintf_r+0x152>
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	eba0 000a 	sub.w	r0, r0, sl
 8001ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8001ffe:	9b04      	ldr	r3, [sp, #16]
 8002000:	3401      	adds	r4, #1
 8002002:	4303      	orrs	r3, r0
 8002004:	9304      	str	r3, [sp, #16]
 8002006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800200a:	2206      	movs	r2, #6
 800200c:	4825      	ldr	r0, [pc, #148]	; (80020a4 <_svfiprintf_r+0x1f0>)
 800200e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002012:	f000 f9e5 	bl	80023e0 <memchr>
 8002016:	2800      	cmp	r0, #0
 8002018:	d038      	beq.n	800208c <_svfiprintf_r+0x1d8>
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <_svfiprintf_r+0x1f4>)
 800201c:	bb1b      	cbnz	r3, 8002066 <_svfiprintf_r+0x1b2>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	3307      	adds	r3, #7
 8002022:	f023 0307 	bic.w	r3, r3, #7
 8002026:	3308      	adds	r3, #8
 8002028:	9303      	str	r3, [sp, #12]
 800202a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800202c:	4433      	add	r3, r6
 800202e:	9309      	str	r3, [sp, #36]	; 0x24
 8002030:	e767      	b.n	8001f02 <_svfiprintf_r+0x4e>
 8002032:	460c      	mov	r4, r1
 8002034:	2001      	movs	r0, #1
 8002036:	fb0c 3202 	mla	r2, ip, r2, r3
 800203a:	e7a5      	b.n	8001f88 <_svfiprintf_r+0xd4>
 800203c:	2300      	movs	r3, #0
 800203e:	f04f 0c0a 	mov.w	ip, #10
 8002042:	4619      	mov	r1, r3
 8002044:	3401      	adds	r4, #1
 8002046:	9305      	str	r3, [sp, #20]
 8002048:	4620      	mov	r0, r4
 800204a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800204e:	3a30      	subs	r2, #48	; 0x30
 8002050:	2a09      	cmp	r2, #9
 8002052:	d903      	bls.n	800205c <_svfiprintf_r+0x1a8>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0c5      	beq.n	8001fe4 <_svfiprintf_r+0x130>
 8002058:	9105      	str	r1, [sp, #20]
 800205a:	e7c3      	b.n	8001fe4 <_svfiprintf_r+0x130>
 800205c:	4604      	mov	r4, r0
 800205e:	2301      	movs	r3, #1
 8002060:	fb0c 2101 	mla	r1, ip, r1, r2
 8002064:	e7f0      	b.n	8002048 <_svfiprintf_r+0x194>
 8002066:	ab03      	add	r3, sp, #12
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	462a      	mov	r2, r5
 800206c:	4638      	mov	r0, r7
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <_svfiprintf_r+0x1f8>)
 8002070:	a904      	add	r1, sp, #16
 8002072:	f3af 8000 	nop.w
 8002076:	1c42      	adds	r2, r0, #1
 8002078:	4606      	mov	r6, r0
 800207a:	d1d6      	bne.n	800202a <_svfiprintf_r+0x176>
 800207c:	89ab      	ldrh	r3, [r5, #12]
 800207e:	065b      	lsls	r3, r3, #25
 8002080:	f53f af2c 	bmi.w	8001edc <_svfiprintf_r+0x28>
 8002084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002086:	b01d      	add	sp, #116	; 0x74
 8002088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800208c:	ab03      	add	r3, sp, #12
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	462a      	mov	r2, r5
 8002092:	4638      	mov	r0, r7
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_svfiprintf_r+0x1f8>)
 8002096:	a904      	add	r1, sp, #16
 8002098:	f000 f87c 	bl	8002194 <_printf_i>
 800209c:	e7eb      	b.n	8002076 <_svfiprintf_r+0x1c2>
 800209e:	bf00      	nop
 80020a0:	080026a0 	.word	0x080026a0
 80020a4:	080026aa 	.word	0x080026aa
 80020a8:	00000000 	.word	0x00000000
 80020ac:	08001dfd 	.word	0x08001dfd
 80020b0:	080026a6 	.word	0x080026a6

080020b4 <_printf_common>:
 80020b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020b8:	4616      	mov	r6, r2
 80020ba:	4699      	mov	r9, r3
 80020bc:	688a      	ldr	r2, [r1, #8]
 80020be:	690b      	ldr	r3, [r1, #16]
 80020c0:	4607      	mov	r7, r0
 80020c2:	4293      	cmp	r3, r2
 80020c4:	bfb8      	it	lt
 80020c6:	4613      	movlt	r3, r2
 80020c8:	6033      	str	r3, [r6, #0]
 80020ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020ce:	460c      	mov	r4, r1
 80020d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020d4:	b10a      	cbz	r2, 80020da <_printf_common+0x26>
 80020d6:	3301      	adds	r3, #1
 80020d8:	6033      	str	r3, [r6, #0]
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	0699      	lsls	r1, r3, #26
 80020de:	bf42      	ittt	mi
 80020e0:	6833      	ldrmi	r3, [r6, #0]
 80020e2:	3302      	addmi	r3, #2
 80020e4:	6033      	strmi	r3, [r6, #0]
 80020e6:	6825      	ldr	r5, [r4, #0]
 80020e8:	f015 0506 	ands.w	r5, r5, #6
 80020ec:	d106      	bne.n	80020fc <_printf_common+0x48>
 80020ee:	f104 0a19 	add.w	sl, r4, #25
 80020f2:	68e3      	ldr	r3, [r4, #12]
 80020f4:	6832      	ldr	r2, [r6, #0]
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	42ab      	cmp	r3, r5
 80020fa:	dc28      	bgt.n	800214e <_printf_common+0x9a>
 80020fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002100:	1e13      	subs	r3, r2, #0
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	bf18      	it	ne
 8002106:	2301      	movne	r3, #1
 8002108:	0692      	lsls	r2, r2, #26
 800210a:	d42d      	bmi.n	8002168 <_printf_common+0xb4>
 800210c:	4649      	mov	r1, r9
 800210e:	4638      	mov	r0, r7
 8002110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002114:	47c0      	blx	r8
 8002116:	3001      	adds	r0, #1
 8002118:	d020      	beq.n	800215c <_printf_common+0xa8>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	68e5      	ldr	r5, [r4, #12]
 800211e:	f003 0306 	and.w	r3, r3, #6
 8002122:	2b04      	cmp	r3, #4
 8002124:	bf18      	it	ne
 8002126:	2500      	movne	r5, #0
 8002128:	6832      	ldr	r2, [r6, #0]
 800212a:	f04f 0600 	mov.w	r6, #0
 800212e:	68a3      	ldr	r3, [r4, #8]
 8002130:	bf08      	it	eq
 8002132:	1aad      	subeq	r5, r5, r2
 8002134:	6922      	ldr	r2, [r4, #16]
 8002136:	bf08      	it	eq
 8002138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800213c:	4293      	cmp	r3, r2
 800213e:	bfc4      	itt	gt
 8002140:	1a9b      	subgt	r3, r3, r2
 8002142:	18ed      	addgt	r5, r5, r3
 8002144:	341a      	adds	r4, #26
 8002146:	42b5      	cmp	r5, r6
 8002148:	d11a      	bne.n	8002180 <_printf_common+0xcc>
 800214a:	2000      	movs	r0, #0
 800214c:	e008      	b.n	8002160 <_printf_common+0xac>
 800214e:	2301      	movs	r3, #1
 8002150:	4652      	mov	r2, sl
 8002152:	4649      	mov	r1, r9
 8002154:	4638      	mov	r0, r7
 8002156:	47c0      	blx	r8
 8002158:	3001      	adds	r0, #1
 800215a:	d103      	bne.n	8002164 <_printf_common+0xb0>
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002164:	3501      	adds	r5, #1
 8002166:	e7c4      	b.n	80020f2 <_printf_common+0x3e>
 8002168:	2030      	movs	r0, #48	; 0x30
 800216a:	18e1      	adds	r1, r4, r3
 800216c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002176:	4422      	add	r2, r4
 8002178:	3302      	adds	r3, #2
 800217a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800217e:	e7c5      	b.n	800210c <_printf_common+0x58>
 8002180:	2301      	movs	r3, #1
 8002182:	4622      	mov	r2, r4
 8002184:	4649      	mov	r1, r9
 8002186:	4638      	mov	r0, r7
 8002188:	47c0      	blx	r8
 800218a:	3001      	adds	r0, #1
 800218c:	d0e6      	beq.n	800215c <_printf_common+0xa8>
 800218e:	3601      	adds	r6, #1
 8002190:	e7d9      	b.n	8002146 <_printf_common+0x92>
	...

08002194 <_printf_i>:
 8002194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002198:	460c      	mov	r4, r1
 800219a:	7e27      	ldrb	r7, [r4, #24]
 800219c:	4691      	mov	r9, r2
 800219e:	2f78      	cmp	r7, #120	; 0x78
 80021a0:	4680      	mov	r8, r0
 80021a2:	469a      	mov	sl, r3
 80021a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021aa:	d807      	bhi.n	80021bc <_printf_i+0x28>
 80021ac:	2f62      	cmp	r7, #98	; 0x62
 80021ae:	d80a      	bhi.n	80021c6 <_printf_i+0x32>
 80021b0:	2f00      	cmp	r7, #0
 80021b2:	f000 80d9 	beq.w	8002368 <_printf_i+0x1d4>
 80021b6:	2f58      	cmp	r7, #88	; 0x58
 80021b8:	f000 80a4 	beq.w	8002304 <_printf_i+0x170>
 80021bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021c4:	e03a      	b.n	800223c <_printf_i+0xa8>
 80021c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021ca:	2b15      	cmp	r3, #21
 80021cc:	d8f6      	bhi.n	80021bc <_printf_i+0x28>
 80021ce:	a001      	add	r0, pc, #4	; (adr r0, 80021d4 <_printf_i+0x40>)
 80021d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021d4:	0800222d 	.word	0x0800222d
 80021d8:	08002241 	.word	0x08002241
 80021dc:	080021bd 	.word	0x080021bd
 80021e0:	080021bd 	.word	0x080021bd
 80021e4:	080021bd 	.word	0x080021bd
 80021e8:	080021bd 	.word	0x080021bd
 80021ec:	08002241 	.word	0x08002241
 80021f0:	080021bd 	.word	0x080021bd
 80021f4:	080021bd 	.word	0x080021bd
 80021f8:	080021bd 	.word	0x080021bd
 80021fc:	080021bd 	.word	0x080021bd
 8002200:	0800234f 	.word	0x0800234f
 8002204:	08002271 	.word	0x08002271
 8002208:	08002331 	.word	0x08002331
 800220c:	080021bd 	.word	0x080021bd
 8002210:	080021bd 	.word	0x080021bd
 8002214:	08002371 	.word	0x08002371
 8002218:	080021bd 	.word	0x080021bd
 800221c:	08002271 	.word	0x08002271
 8002220:	080021bd 	.word	0x080021bd
 8002224:	080021bd 	.word	0x080021bd
 8002228:	08002339 	.word	0x08002339
 800222c:	680b      	ldr	r3, [r1, #0]
 800222e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002232:	1d1a      	adds	r2, r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	600a      	str	r2, [r1, #0]
 8002238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800223c:	2301      	movs	r3, #1
 800223e:	e0a4      	b.n	800238a <_printf_i+0x1f6>
 8002240:	6825      	ldr	r5, [r4, #0]
 8002242:	6808      	ldr	r0, [r1, #0]
 8002244:	062e      	lsls	r6, r5, #24
 8002246:	f100 0304 	add.w	r3, r0, #4
 800224a:	d50a      	bpl.n	8002262 <_printf_i+0xce>
 800224c:	6805      	ldr	r5, [r0, #0]
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	2d00      	cmp	r5, #0
 8002252:	da03      	bge.n	800225c <_printf_i+0xc8>
 8002254:	232d      	movs	r3, #45	; 0x2d
 8002256:	426d      	negs	r5, r5
 8002258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800225c:	230a      	movs	r3, #10
 800225e:	485e      	ldr	r0, [pc, #376]	; (80023d8 <_printf_i+0x244>)
 8002260:	e019      	b.n	8002296 <_printf_i+0x102>
 8002262:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002266:	6805      	ldr	r5, [r0, #0]
 8002268:	600b      	str	r3, [r1, #0]
 800226a:	bf18      	it	ne
 800226c:	b22d      	sxthne	r5, r5
 800226e:	e7ef      	b.n	8002250 <_printf_i+0xbc>
 8002270:	680b      	ldr	r3, [r1, #0]
 8002272:	6825      	ldr	r5, [r4, #0]
 8002274:	1d18      	adds	r0, r3, #4
 8002276:	6008      	str	r0, [r1, #0]
 8002278:	0628      	lsls	r0, r5, #24
 800227a:	d501      	bpl.n	8002280 <_printf_i+0xec>
 800227c:	681d      	ldr	r5, [r3, #0]
 800227e:	e002      	b.n	8002286 <_printf_i+0xf2>
 8002280:	0669      	lsls	r1, r5, #25
 8002282:	d5fb      	bpl.n	800227c <_printf_i+0xe8>
 8002284:	881d      	ldrh	r5, [r3, #0]
 8002286:	2f6f      	cmp	r7, #111	; 0x6f
 8002288:	bf0c      	ite	eq
 800228a:	2308      	moveq	r3, #8
 800228c:	230a      	movne	r3, #10
 800228e:	4852      	ldr	r0, [pc, #328]	; (80023d8 <_printf_i+0x244>)
 8002290:	2100      	movs	r1, #0
 8002292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002296:	6866      	ldr	r6, [r4, #4]
 8002298:	2e00      	cmp	r6, #0
 800229a:	bfa8      	it	ge
 800229c:	6821      	ldrge	r1, [r4, #0]
 800229e:	60a6      	str	r6, [r4, #8]
 80022a0:	bfa4      	itt	ge
 80022a2:	f021 0104 	bicge.w	r1, r1, #4
 80022a6:	6021      	strge	r1, [r4, #0]
 80022a8:	b90d      	cbnz	r5, 80022ae <_printf_i+0x11a>
 80022aa:	2e00      	cmp	r6, #0
 80022ac:	d04d      	beq.n	800234a <_printf_i+0x1b6>
 80022ae:	4616      	mov	r6, r2
 80022b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80022b4:	fb03 5711 	mls	r7, r3, r1, r5
 80022b8:	5dc7      	ldrb	r7, [r0, r7]
 80022ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022be:	462f      	mov	r7, r5
 80022c0:	42bb      	cmp	r3, r7
 80022c2:	460d      	mov	r5, r1
 80022c4:	d9f4      	bls.n	80022b0 <_printf_i+0x11c>
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d10b      	bne.n	80022e2 <_printf_i+0x14e>
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	07df      	lsls	r7, r3, #31
 80022ce:	d508      	bpl.n	80022e2 <_printf_i+0x14e>
 80022d0:	6923      	ldr	r3, [r4, #16]
 80022d2:	6861      	ldr	r1, [r4, #4]
 80022d4:	4299      	cmp	r1, r3
 80022d6:	bfde      	ittt	le
 80022d8:	2330      	movle	r3, #48	; 0x30
 80022da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022e2:	1b92      	subs	r2, r2, r6
 80022e4:	6122      	str	r2, [r4, #16]
 80022e6:	464b      	mov	r3, r9
 80022e8:	4621      	mov	r1, r4
 80022ea:	4640      	mov	r0, r8
 80022ec:	f8cd a000 	str.w	sl, [sp]
 80022f0:	aa03      	add	r2, sp, #12
 80022f2:	f7ff fedf 	bl	80020b4 <_printf_common>
 80022f6:	3001      	adds	r0, #1
 80022f8:	d14c      	bne.n	8002394 <_printf_i+0x200>
 80022fa:	f04f 30ff 	mov.w	r0, #4294967295
 80022fe:	b004      	add	sp, #16
 8002300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002304:	4834      	ldr	r0, [pc, #208]	; (80023d8 <_printf_i+0x244>)
 8002306:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800230a:	680e      	ldr	r6, [r1, #0]
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002312:	061f      	lsls	r7, r3, #24
 8002314:	600e      	str	r6, [r1, #0]
 8002316:	d514      	bpl.n	8002342 <_printf_i+0x1ae>
 8002318:	07d9      	lsls	r1, r3, #31
 800231a:	bf44      	itt	mi
 800231c:	f043 0320 	orrmi.w	r3, r3, #32
 8002320:	6023      	strmi	r3, [r4, #0]
 8002322:	b91d      	cbnz	r5, 800232c <_printf_i+0x198>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	f023 0320 	bic.w	r3, r3, #32
 800232a:	6023      	str	r3, [r4, #0]
 800232c:	2310      	movs	r3, #16
 800232e:	e7af      	b.n	8002290 <_printf_i+0xfc>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f043 0320 	orr.w	r3, r3, #32
 8002336:	6023      	str	r3, [r4, #0]
 8002338:	2378      	movs	r3, #120	; 0x78
 800233a:	4828      	ldr	r0, [pc, #160]	; (80023dc <_printf_i+0x248>)
 800233c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002340:	e7e3      	b.n	800230a <_printf_i+0x176>
 8002342:	065e      	lsls	r6, r3, #25
 8002344:	bf48      	it	mi
 8002346:	b2ad      	uxthmi	r5, r5
 8002348:	e7e6      	b.n	8002318 <_printf_i+0x184>
 800234a:	4616      	mov	r6, r2
 800234c:	e7bb      	b.n	80022c6 <_printf_i+0x132>
 800234e:	680b      	ldr	r3, [r1, #0]
 8002350:	6826      	ldr	r6, [r4, #0]
 8002352:	1d1d      	adds	r5, r3, #4
 8002354:	6960      	ldr	r0, [r4, #20]
 8002356:	600d      	str	r5, [r1, #0]
 8002358:	0635      	lsls	r5, r6, #24
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	d501      	bpl.n	8002362 <_printf_i+0x1ce>
 800235e:	6018      	str	r0, [r3, #0]
 8002360:	e002      	b.n	8002368 <_printf_i+0x1d4>
 8002362:	0671      	lsls	r1, r6, #25
 8002364:	d5fb      	bpl.n	800235e <_printf_i+0x1ca>
 8002366:	8018      	strh	r0, [r3, #0]
 8002368:	2300      	movs	r3, #0
 800236a:	4616      	mov	r6, r2
 800236c:	6123      	str	r3, [r4, #16]
 800236e:	e7ba      	b.n	80022e6 <_printf_i+0x152>
 8002370:	680b      	ldr	r3, [r1, #0]
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	600a      	str	r2, [r1, #0]
 8002376:	681e      	ldr	r6, [r3, #0]
 8002378:	2100      	movs	r1, #0
 800237a:	4630      	mov	r0, r6
 800237c:	6862      	ldr	r2, [r4, #4]
 800237e:	f000 f82f 	bl	80023e0 <memchr>
 8002382:	b108      	cbz	r0, 8002388 <_printf_i+0x1f4>
 8002384:	1b80      	subs	r0, r0, r6
 8002386:	6060      	str	r0, [r4, #4]
 8002388:	6863      	ldr	r3, [r4, #4]
 800238a:	6123      	str	r3, [r4, #16]
 800238c:	2300      	movs	r3, #0
 800238e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002392:	e7a8      	b.n	80022e6 <_printf_i+0x152>
 8002394:	4632      	mov	r2, r6
 8002396:	4649      	mov	r1, r9
 8002398:	4640      	mov	r0, r8
 800239a:	6923      	ldr	r3, [r4, #16]
 800239c:	47d0      	blx	sl
 800239e:	3001      	adds	r0, #1
 80023a0:	d0ab      	beq.n	80022fa <_printf_i+0x166>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	079b      	lsls	r3, r3, #30
 80023a6:	d413      	bmi.n	80023d0 <_printf_i+0x23c>
 80023a8:	68e0      	ldr	r0, [r4, #12]
 80023aa:	9b03      	ldr	r3, [sp, #12]
 80023ac:	4298      	cmp	r0, r3
 80023ae:	bfb8      	it	lt
 80023b0:	4618      	movlt	r0, r3
 80023b2:	e7a4      	b.n	80022fe <_printf_i+0x16a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	4632      	mov	r2, r6
 80023b8:	4649      	mov	r1, r9
 80023ba:	4640      	mov	r0, r8
 80023bc:	47d0      	blx	sl
 80023be:	3001      	adds	r0, #1
 80023c0:	d09b      	beq.n	80022fa <_printf_i+0x166>
 80023c2:	3501      	adds	r5, #1
 80023c4:	68e3      	ldr	r3, [r4, #12]
 80023c6:	9903      	ldr	r1, [sp, #12]
 80023c8:	1a5b      	subs	r3, r3, r1
 80023ca:	42ab      	cmp	r3, r5
 80023cc:	dcf2      	bgt.n	80023b4 <_printf_i+0x220>
 80023ce:	e7eb      	b.n	80023a8 <_printf_i+0x214>
 80023d0:	2500      	movs	r5, #0
 80023d2:	f104 0619 	add.w	r6, r4, #25
 80023d6:	e7f5      	b.n	80023c4 <_printf_i+0x230>
 80023d8:	080026b1 	.word	0x080026b1
 80023dc:	080026c2 	.word	0x080026c2

080023e0 <memchr>:
 80023e0:	4603      	mov	r3, r0
 80023e2:	b510      	push	{r4, lr}
 80023e4:	b2c9      	uxtb	r1, r1
 80023e6:	4402      	add	r2, r0
 80023e8:	4293      	cmp	r3, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	d101      	bne.n	80023f2 <memchr+0x12>
 80023ee:	2000      	movs	r0, #0
 80023f0:	e003      	b.n	80023fa <memchr+0x1a>
 80023f2:	7804      	ldrb	r4, [r0, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	428c      	cmp	r4, r1
 80023f8:	d1f6      	bne.n	80023e8 <memchr+0x8>
 80023fa:	bd10      	pop	{r4, pc}

080023fc <memcpy>:
 80023fc:	440a      	add	r2, r1
 80023fe:	4291      	cmp	r1, r2
 8002400:	f100 33ff 	add.w	r3, r0, #4294967295
 8002404:	d100      	bne.n	8002408 <memcpy+0xc>
 8002406:	4770      	bx	lr
 8002408:	b510      	push	{r4, lr}
 800240a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800240e:	4291      	cmp	r1, r2
 8002410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002414:	d1f9      	bne.n	800240a <memcpy+0xe>
 8002416:	bd10      	pop	{r4, pc}

08002418 <memmove>:
 8002418:	4288      	cmp	r0, r1
 800241a:	b510      	push	{r4, lr}
 800241c:	eb01 0402 	add.w	r4, r1, r2
 8002420:	d902      	bls.n	8002428 <memmove+0x10>
 8002422:	4284      	cmp	r4, r0
 8002424:	4623      	mov	r3, r4
 8002426:	d807      	bhi.n	8002438 <memmove+0x20>
 8002428:	1e43      	subs	r3, r0, #1
 800242a:	42a1      	cmp	r1, r4
 800242c:	d008      	beq.n	8002440 <memmove+0x28>
 800242e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002436:	e7f8      	b.n	800242a <memmove+0x12>
 8002438:	4601      	mov	r1, r0
 800243a:	4402      	add	r2, r0
 800243c:	428a      	cmp	r2, r1
 800243e:	d100      	bne.n	8002442 <memmove+0x2a>
 8002440:	bd10      	pop	{r4, pc}
 8002442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800244a:	e7f7      	b.n	800243c <memmove+0x24>

0800244c <_free_r>:
 800244c:	b538      	push	{r3, r4, r5, lr}
 800244e:	4605      	mov	r5, r0
 8002450:	2900      	cmp	r1, #0
 8002452:	d043      	beq.n	80024dc <_free_r+0x90>
 8002454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002458:	1f0c      	subs	r4, r1, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfb8      	it	lt
 800245e:	18e4      	addlt	r4, r4, r3
 8002460:	f000 f8d0 	bl	8002604 <__malloc_lock>
 8002464:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <_free_r+0x94>)
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	4610      	mov	r0, r2
 800246a:	b933      	cbnz	r3, 800247a <_free_r+0x2e>
 800246c:	6063      	str	r3, [r4, #4]
 800246e:	6014      	str	r4, [r2, #0]
 8002470:	4628      	mov	r0, r5
 8002472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002476:	f000 b8cb 	b.w	8002610 <__malloc_unlock>
 800247a:	42a3      	cmp	r3, r4
 800247c:	d90a      	bls.n	8002494 <_free_r+0x48>
 800247e:	6821      	ldr	r1, [r4, #0]
 8002480:	1862      	adds	r2, r4, r1
 8002482:	4293      	cmp	r3, r2
 8002484:	bf01      	itttt	eq
 8002486:	681a      	ldreq	r2, [r3, #0]
 8002488:	685b      	ldreq	r3, [r3, #4]
 800248a:	1852      	addeq	r2, r2, r1
 800248c:	6022      	streq	r2, [r4, #0]
 800248e:	6063      	str	r3, [r4, #4]
 8002490:	6004      	str	r4, [r0, #0]
 8002492:	e7ed      	b.n	8002470 <_free_r+0x24>
 8002494:	461a      	mov	r2, r3
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	b10b      	cbz	r3, 800249e <_free_r+0x52>
 800249a:	42a3      	cmp	r3, r4
 800249c:	d9fa      	bls.n	8002494 <_free_r+0x48>
 800249e:	6811      	ldr	r1, [r2, #0]
 80024a0:	1850      	adds	r0, r2, r1
 80024a2:	42a0      	cmp	r0, r4
 80024a4:	d10b      	bne.n	80024be <_free_r+0x72>
 80024a6:	6820      	ldr	r0, [r4, #0]
 80024a8:	4401      	add	r1, r0
 80024aa:	1850      	adds	r0, r2, r1
 80024ac:	4283      	cmp	r3, r0
 80024ae:	6011      	str	r1, [r2, #0]
 80024b0:	d1de      	bne.n	8002470 <_free_r+0x24>
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4401      	add	r1, r0
 80024b8:	6011      	str	r1, [r2, #0]
 80024ba:	6053      	str	r3, [r2, #4]
 80024bc:	e7d8      	b.n	8002470 <_free_r+0x24>
 80024be:	d902      	bls.n	80024c6 <_free_r+0x7a>
 80024c0:	230c      	movs	r3, #12
 80024c2:	602b      	str	r3, [r5, #0]
 80024c4:	e7d4      	b.n	8002470 <_free_r+0x24>
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	1821      	adds	r1, r4, r0
 80024ca:	428b      	cmp	r3, r1
 80024cc:	bf01      	itttt	eq
 80024ce:	6819      	ldreq	r1, [r3, #0]
 80024d0:	685b      	ldreq	r3, [r3, #4]
 80024d2:	1809      	addeq	r1, r1, r0
 80024d4:	6021      	streq	r1, [r4, #0]
 80024d6:	6063      	str	r3, [r4, #4]
 80024d8:	6054      	str	r4, [r2, #4]
 80024da:	e7c9      	b.n	8002470 <_free_r+0x24>
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	200000b4 	.word	0x200000b4

080024e4 <_malloc_r>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	1ccd      	adds	r5, r1, #3
 80024e8:	f025 0503 	bic.w	r5, r5, #3
 80024ec:	3508      	adds	r5, #8
 80024ee:	2d0c      	cmp	r5, #12
 80024f0:	bf38      	it	cc
 80024f2:	250c      	movcc	r5, #12
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	4606      	mov	r6, r0
 80024f8:	db01      	blt.n	80024fe <_malloc_r+0x1a>
 80024fa:	42a9      	cmp	r1, r5
 80024fc:	d903      	bls.n	8002506 <_malloc_r+0x22>
 80024fe:	230c      	movs	r3, #12
 8002500:	6033      	str	r3, [r6, #0]
 8002502:	2000      	movs	r0, #0
 8002504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002506:	f000 f87d 	bl	8002604 <__malloc_lock>
 800250a:	4921      	ldr	r1, [pc, #132]	; (8002590 <_malloc_r+0xac>)
 800250c:	680a      	ldr	r2, [r1, #0]
 800250e:	4614      	mov	r4, r2
 8002510:	b99c      	cbnz	r4, 800253a <_malloc_r+0x56>
 8002512:	4f20      	ldr	r7, [pc, #128]	; (8002594 <_malloc_r+0xb0>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b923      	cbnz	r3, 8002522 <_malloc_r+0x3e>
 8002518:	4621      	mov	r1, r4
 800251a:	4630      	mov	r0, r6
 800251c:	f000 f862 	bl	80025e4 <_sbrk_r>
 8002520:	6038      	str	r0, [r7, #0]
 8002522:	4629      	mov	r1, r5
 8002524:	4630      	mov	r0, r6
 8002526:	f000 f85d 	bl	80025e4 <_sbrk_r>
 800252a:	1c43      	adds	r3, r0, #1
 800252c:	d123      	bne.n	8002576 <_malloc_r+0x92>
 800252e:	230c      	movs	r3, #12
 8002530:	4630      	mov	r0, r6
 8002532:	6033      	str	r3, [r6, #0]
 8002534:	f000 f86c 	bl	8002610 <__malloc_unlock>
 8002538:	e7e3      	b.n	8002502 <_malloc_r+0x1e>
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	1b5b      	subs	r3, r3, r5
 800253e:	d417      	bmi.n	8002570 <_malloc_r+0x8c>
 8002540:	2b0b      	cmp	r3, #11
 8002542:	d903      	bls.n	800254c <_malloc_r+0x68>
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	441c      	add	r4, r3
 8002548:	6025      	str	r5, [r4, #0]
 800254a:	e004      	b.n	8002556 <_malloc_r+0x72>
 800254c:	6863      	ldr	r3, [r4, #4]
 800254e:	42a2      	cmp	r2, r4
 8002550:	bf0c      	ite	eq
 8002552:	600b      	streq	r3, [r1, #0]
 8002554:	6053      	strne	r3, [r2, #4]
 8002556:	4630      	mov	r0, r6
 8002558:	f000 f85a 	bl	8002610 <__malloc_unlock>
 800255c:	f104 000b 	add.w	r0, r4, #11
 8002560:	1d23      	adds	r3, r4, #4
 8002562:	f020 0007 	bic.w	r0, r0, #7
 8002566:	1ac2      	subs	r2, r0, r3
 8002568:	d0cc      	beq.n	8002504 <_malloc_r+0x20>
 800256a:	1a1b      	subs	r3, r3, r0
 800256c:	50a3      	str	r3, [r4, r2]
 800256e:	e7c9      	b.n	8002504 <_malloc_r+0x20>
 8002570:	4622      	mov	r2, r4
 8002572:	6864      	ldr	r4, [r4, #4]
 8002574:	e7cc      	b.n	8002510 <_malloc_r+0x2c>
 8002576:	1cc4      	adds	r4, r0, #3
 8002578:	f024 0403 	bic.w	r4, r4, #3
 800257c:	42a0      	cmp	r0, r4
 800257e:	d0e3      	beq.n	8002548 <_malloc_r+0x64>
 8002580:	1a21      	subs	r1, r4, r0
 8002582:	4630      	mov	r0, r6
 8002584:	f000 f82e 	bl	80025e4 <_sbrk_r>
 8002588:	3001      	adds	r0, #1
 800258a:	d1dd      	bne.n	8002548 <_malloc_r+0x64>
 800258c:	e7cf      	b.n	800252e <_malloc_r+0x4a>
 800258e:	bf00      	nop
 8002590:	200000b4 	.word	0x200000b4
 8002594:	200000b8 	.word	0x200000b8

08002598 <_realloc_r>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	4607      	mov	r7, r0
 800259c:	4614      	mov	r4, r2
 800259e:	460e      	mov	r6, r1
 80025a0:	b921      	cbnz	r1, 80025ac <_realloc_r+0x14>
 80025a2:	4611      	mov	r1, r2
 80025a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025a8:	f7ff bf9c 	b.w	80024e4 <_malloc_r>
 80025ac:	b922      	cbnz	r2, 80025b8 <_realloc_r+0x20>
 80025ae:	f7ff ff4d 	bl	800244c <_free_r>
 80025b2:	4625      	mov	r5, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b8:	f000 f830 	bl	800261c <_malloc_usable_size_r>
 80025bc:	42a0      	cmp	r0, r4
 80025be:	d20f      	bcs.n	80025e0 <_realloc_r+0x48>
 80025c0:	4621      	mov	r1, r4
 80025c2:	4638      	mov	r0, r7
 80025c4:	f7ff ff8e 	bl	80024e4 <_malloc_r>
 80025c8:	4605      	mov	r5, r0
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d0f2      	beq.n	80025b4 <_realloc_r+0x1c>
 80025ce:	4631      	mov	r1, r6
 80025d0:	4622      	mov	r2, r4
 80025d2:	f7ff ff13 	bl	80023fc <memcpy>
 80025d6:	4631      	mov	r1, r6
 80025d8:	4638      	mov	r0, r7
 80025da:	f7ff ff37 	bl	800244c <_free_r>
 80025de:	e7e9      	b.n	80025b4 <_realloc_r+0x1c>
 80025e0:	4635      	mov	r5, r6
 80025e2:	e7e7      	b.n	80025b4 <_realloc_r+0x1c>

080025e4 <_sbrk_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	2300      	movs	r3, #0
 80025e8:	4d05      	ldr	r5, [pc, #20]	; (8002600 <_sbrk_r+0x1c>)
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	602b      	str	r3, [r5, #0]
 80025f0:	f7fe f95e 	bl	80008b0 <_sbrk>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_sbrk_r+0x1a>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_sbrk_r+0x1a>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	20000104 	.word	0x20000104

08002604 <__malloc_lock>:
 8002604:	4801      	ldr	r0, [pc, #4]	; (800260c <__malloc_lock+0x8>)
 8002606:	f000 b811 	b.w	800262c <__retarget_lock_acquire_recursive>
 800260a:	bf00      	nop
 800260c:	2000010c 	.word	0x2000010c

08002610 <__malloc_unlock>:
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <__malloc_unlock+0x8>)
 8002612:	f000 b80c 	b.w	800262e <__retarget_lock_release_recursive>
 8002616:	bf00      	nop
 8002618:	2000010c 	.word	0x2000010c

0800261c <_malloc_usable_size_r>:
 800261c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002620:	1f18      	subs	r0, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfbc      	itt	lt
 8002626:	580b      	ldrlt	r3, [r1, r0]
 8002628:	18c0      	addlt	r0, r0, r3
 800262a:	4770      	bx	lr

0800262c <__retarget_lock_acquire_recursive>:
 800262c:	4770      	bx	lr

0800262e <__retarget_lock_release_recursive>:
 800262e:	4770      	bx	lr

08002630 <_init>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr

0800263c <_fini>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr
